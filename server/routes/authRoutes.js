const express = require("express");
const passport = require("passport");
const jwt = require("jsonwebtoken");
const router = express.Router();
const User = require("../models/User");
const auth = require('../middleware/authMiddleware');

const {
Â  signup,
Â  login,
Â  handleSocialLogin,
Â  sendEmailOtp,
Â  verifyEmailOtp,
Â  sendPasswordResetOtp,
Â  resetPasswordWithOtp,
Â  changePassword,
  sendSignupOtp,
  verifySignupOtp // âœ… FIXED: The missing import is now here
} = require("../controllers/authControllers");

const JWT_SECRET = process.env.JWT_SECRET || "your_jwt_secret_here";

// ðŸ”¹ GOOGLE AUTH
router.get("/google", passport.authenticate("google", {
Â  scope: ["profile", "email"],
}));

router.get("/google/callback",
Â  passport.authenticate("google", { session: false, failureRedirect: "/login" }),
Â  handleSocialLogin
);

// ðŸ”¹ NORMAL SIGNUP / LOGIN
router.post("/signup", signup);
router.post("/login", login);

router.post("/send-email-otp", sendEmailOtp);
router.post("/verify-email-otp", verifyEmailOtp);

// ðŸ”¹ PASSWORD MANAGEMENT ROUTES
router.post('/send-password-reset-otp', sendPasswordResetOtp);
router.post('/reset-password-otp', resetPasswordWithOtp);
router.post('/change-password', auth(), changePassword);

// âœ… NEW: Route for sending OTP during signup
router.post("/send-signup-otp", sendSignupOtp);
router.post("/verify-signup-otp", verifySignupOtp);

// ðŸ”¹ GET LOGGED-IN USER
router.get("/user", auth(), async (req, res) => {
Â  try {
Â  Â  const user = await User.findById(req.user.id).select("-password");
Â  Â  if (!user) {
Â  Â  Â  return res.status(404).json({ message: "User not found" });
Â  Â  }
Â  Â  res.status(200).json({ user });
Â  } catch (err) {
Â  Â  console.error("User fetch error:", err.message);
Â  Â  res.status(401).json({ message: "Invalid or expired token" });
Â  }
});

module.exports = router;
