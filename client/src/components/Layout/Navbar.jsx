import { Link, useLocation, useNavigate } from 'react-router-dom';
import { useEffect, useState, useCallback, useRef } from 'react';
import axios from 'axios';
import './layoutcss/Navbar.css';
import { useCart } from '../../pages/order management/CartContext';
import maleIcon from '../../assets/profile-male.png';
import femaleIcon from '../../assets/profile-female.png';
import defaultIcon from '../../assets/profile-default.png';
const debounce = (func, delay) => {
Â  let timeoutId;
Â  return (...args) => {
Â  Â  clearTimeout(timeoutId);
Â  Â  timeoutId = setTimeout(() => {
Â  Â  Â  func(...args);
Â  Â  }, delay);
Â  };
};

const Navbar = () => {
Â  const location = useLocation();
Â  const navigate = useNavigate();
Â  const { cartItems } = useCart();
  const { clearCart } = useCart();
Â  const [menuOpen, setMenuOpen] = useState(false);
Â  const [showSearch, setShowSearch] = useState(false);
Â  const [isLoggedIn, setIsLoggedIn] = useState(false);
Â  const [userData, setUserData] = useState(null);
Â  const [searchQuery, setSearchQuery] = useState('');
Â  const [suggestions, setSuggestions] = useState([]);
Â  // Ref to the search container to detect clicks outside
Â  const searchContainerRef = useRef(null);

Â  useEffect(() => { 
Â  Â  setShowSearch(location.pathname !== '/'); 
Â  Â  setSuggestions([]); // Clear suggestions on page navigation
Â  }, [location]);

Â  useEffect(() => {
Â  Â  const token = localStorage.getItem('token');
Â  Â  const user = localStorage.getItem('user');
Â  Â  if (token && user) {
Â  Â  Â  setIsLoggedIn(true);
Â  Â  Â  setUserData(JSON.parse(user));
Â  Â  } else {
Â  Â  Â  setIsLoggedIn(false);
Â  Â  Â  setUserData(null);
Â  Â  }
Â  }, [location.key]);

Â  const fetchSuggestions = useCallback(
Â  Â  debounce(async (query) => {
Â  Â  Â  if (query.length > 0) {
Â  Â  Â  Â  try {
Â  Â  Â  Â  Â  const res = await axios.get(`${import.meta.env.VITE_API_URL}/api/products/search?q=${query}`);
Â  Â  Â  Â  Â  setSuggestions(res.data.slice(0, 5));
Â  Â  Â  Â  } catch (error) {
Â  Â  Â  Â  Â  console.error("Failed to fetch suggestions:", error);
Â  Â  Â  Â  Â  setSuggestions([]); 
Â  Â  Â  Â  }
Â  Â  Â  } else {
Â  Â  Â  Â  setSuggestions([]);
Â  Â  Â  }
Â  Â  }, 200),
Â  Â  []
Â  );

Â  const handleInputChange = (e) => {
Â  Â  setSearchQuery(e.target.value);
Â  Â  fetchSuggestions(e.target.value);
Â  };
Â  
Â  const handleSearch = (e) => {
Â  Â  e.preventDefault();
Â  Â  if (searchQuery.trim()) {
Â  Â  Â  setSuggestions([]);
Â  Â  Â  navigate(`/search-results?q=${searchQuery}`);
Â  Â  }
Â  };

Â  const handleSuggestionClick = (name) => {
Â  Â  setSearchQuery(name);
Â  Â  setSuggestions([]);
Â  Â  navigate(`/search-results?q=${name}`);
Â  };

Â  // New useEffect to handle clicks outside the search container
Â  useEffect(() => {
Â  Â  const handleClickOutside = (event) => {
Â  Â  Â  if (searchContainerRef.current && !searchContainerRef.current.contains(event.target)) {
Â  Â  Â  Â  setSuggestions([]); // Clear suggestions if click is outside
Â  Â  Â  }
Â  Â  };
Â  Â  document.addEventListener("mousedown", handleClickOutside);
Â  Â  return () => {
Â  Â  Â  document.removeEventListener("mousedown", handleClickOutside);
Â  Â  };
Â  }, [searchContainerRef]);

Â  const cartCount = cartItems.reduce((sum, i) => sum + i.quantity, 0);
Â  const toggleMenu = () => setMenuOpen(prev => !prev);
Â  const handleLogout = () => { clearCart();localStorage.clear(); navigate('/'); };
Â  const getProfileImage = () => {
Â  Â  if (!userData?.gender) return defaultIcon;
Â  Â  const g = userData.gender.toLowerCase();
Â  Â  return g === 'male' ? maleIcon : g === 'female' ? femaleIcon : defaultIcon;
Â  };

Â  return (
Â  Â  <nav className="navbar">
Â  Â  Â  <div className="navbar-top">
Â  Â  Â  Â  <Link to="/" className="logo">Shop Smart</Link>
Â  Â  Â  Â  <button className="menu-toggle" onClick={toggleMenu}>â˜°</button>
Â  Â  Â  </div>

Â  Â  Â  {showSearch && (
Â  Â  Â  Â  <form onSubmit={handleSearch} className="search-bar-container" ref={searchContainerRef}>
Â  Â  Â  Â  Â  <div className="search-bar">
Â  Â  Â  Â  Â  Â  <input
Â  Â  Â  Â  Â  Â  Â  type="text"
Â  Â  Â  Â  Â  Â  Â  placeholder="Search groceries..."
Â  Â  Â  Â  Â  Â  Â  value={searchQuery}
Â  Â  Â  Â  Â  Â  Â  onChange={handleInputChange}
Â  Â  Â  Â  Â  Â  />
Â  Â  Â  Â  Â  Â  <button type="submit">Search</button>
Â  Â  Â  Â  Â  </div>
Â  Â  Â  Â  Â  {suggestions.length > 0 && (
Â  Â  Â  Â  Â  Â  <ul className="suggestions-dropdown">
Â  Â  Â  Â  Â  Â  Â  {suggestions.map((item) => (
Â  Â  Â  Â  Â  Â  Â  Â  <li key={item._id} onClick={() => handleSuggestionClick(item.name)}>
Â  Â  Â  Â  Â  Â  Â  Â  Â  {item.name}
Â  Â  Â  Â  Â  Â  Â  Â  </li>
Â  Â  Â  Â  Â  Â  Â  ))}
Â  Â  Â  Â  Â  Â  </ul>
Â  Â  Â  Â  Â  )}
Â  Â  Â  Â  </form>
Â  Â  Â  )}
        
        Â  Â  Â  <div className={`navbar-right ${menuOpen ? 'show' : ''}`}>
            {userData?.role!=="dealer"&&(
        Â  Â  Â  Â  <Link to="/cart" className="relative nav-btn cart-navi">
        Â  Â  Â  Â  Â  ðŸ›’Cart
        Â  Â  Â  Â  Â  {cartCount > 0 && <span className="cart-badge">{cartCount}</span>}
        Â  Â  Â  Â  </Link>
       ) }
Â  Â  Â  Â  {isLoggedIn ? (
Â  Â  Â  Â  Â  <>{userData.role==="dealer"&&(
         Â  Â <Link to="/product-manager-dashboard?tab=orders" className="dashboard-btn-1 nav-btn nav-new">Orders</Link> )}  
Â  Â  Â  Â  Â  Â  <Link to="/dashboard" className="dashboard-btn-1 nav-btn nav-new">Dashboard</Link>
Â  Â  Â  Â  Â  Â  <Link to="/home">
Â  Â  Â  Â  Â  Â  Â  <div className="profile-info">
Â  Â  Â  Â  Â  Â  Â  Â  <img src={getProfileImage()} alt="Profile" className="profile-icon" />
Â  Â  Â  Â  Â  Â  Â  Â  <span className="profile-name-nav">{userData?.firstName}</span>
Â  Â  Â  Â  Â  Â  Â  </div>
Â  Â  Â  Â  Â  Â  </Link>
Â  Â  Â  Â  Â  Â  <button onClick={handleLogout} className="nav-btn logout-btn nav-new">Logout</button>
Â  Â  Â  Â  Â  </>
Â  Â  Â  Â  ) : (
Â  Â  Â  Â  Â  <>
Â  Â  Â  Â  Â  Â  <Link to="/login" className="nav-btn nav-new">Login</Link>
Â  Â  Â  Â  Â  Â  <Link to="/signup" className="nav-btn nav-new">Signup</Link>
Â  Â  Â  Â  Â  </>
Â  Â  Â  Â  )}
Â  Â  Â  </div>
Â  Â  </nav>
Â  );
};

export default Navbar;