import React, { useState, useEffect, useRef } from "react";
import axios from "axios";
import "./css/ProductAddForm.css";
import { useNavigate } from 'react-router-dom';

const ProductAddForm = ({ showFlash }) => {
Â  const additionalImagesRef = useRef(null);
Â  const navigate = useNavigate();

Â  const [formData, setFormData] = useState({
Â  Â  name: "",
Â  Â  category: "",
Â  Â  description: "",
Â  Â  brand: "",
Â  Â  tags: "",
Â  Â  isFeatured: false,
Â  Â  isNewArrival: true,
Â  Â  organic: false,
Â  Â  expiryDate: "",
Â  Â  shelfLife: "",
Â  Â  popularityScore: 0,
Â  Â  dealerId: "",
Â  });

Â  const [dealerName, setDealerName] = useState("");
Â  const [mainImage, setMainImage] = useState(null);
Â  const [mainImagePreview, setMainImagePreview] = useState(null);
Â  const [additionalImages, setAdditionalImages] = useState([]);
Â  const [additionalPreviews, setAdditionalPreviews] = useState([]);
Â  const [variants, setVariants] = useState([]);
Â  const [isSubmitting, setIsSubmitting] = useState(false);
Â  // ðŸ‘ˆ New state to show the "please wait" message
Â  const [isLoading, setIsLoading] = useState(false);

Â  useEffect(() => {
Â  Â  try {
Â  Â  Â  const user = JSON.parse(localStorage.getItem('user'));
Â  Â  Â  if (user && user._id) { 
Â  Â  Â  Â  setFormData((prev) => ({ ...prev, dealerId: user._id }));
Â  Â  Â  Â  const fullName = `${user.firstName} ${user.lastName}`;
Â  Â  Â  Â  setDealerName(fullName.trim()); 
Â  Â  Â  }
Â  Â  } catch (error) {
Â  Â  Â  console.error("Failed to parse user data from localStorage", error);
Â  Â  }
Â  }, []);

Â  const handleChange = (e) => {
Â  Â  const { name, value, type, checked } = e.target;
Â  Â  setFormData((prev) => ({
Â  Â  Â  ...prev,
Â  Â  Â  [name]: type === "checkbox" ? checked : value,
Â  Â  }));
Â  };

Â  const handleCustomButtonClick = () => {
Â  Â  additionalImagesRef.current.click();
Â  };

Â  const handleMainImageChange = (e) => {
Â  Â  const file = e.target.files[0];
Â  Â  if (file) {
Â  Â  Â  setMainImage(file);
Â  Â  Â  setMainImagePreview(URL.createObjectURL(file));
Â  Â  }
Â  };

Â  const handleRemoveMainImage = () => {
Â  Â  setMainImage(null);
Â  Â  setMainImagePreview(null);
Â  };

Â  const handleAdditionalImagesChange = (e) => {
Â  Â  const newFiles = Array.from(e.target.files);
Â  Â  const updatedImages = [...additionalImages, ...newFiles];
Â  Â  const updatedPreviews = updatedImages.map((file) => URL.createObjectURL(file));

Â  Â  setAdditionalImages(updatedImages);
Â  Â  setAdditionalPreviews(updatedPreviews);
Â  Â  e.target.value = null;
Â  };

Â  const handleRemoveAdditionalImage = (index) => {
Â  Â  const updatedImages = additionalImages.filter((_, i) => i !== index);
Â  Â  const updatedPreviews = additionalPreviews.filter((_, i) => i !== index);

Â  Â  setAdditionalImages(updatedImages);
Â  Â  setAdditionalPreviews(updatedPreviews);
Â  };

Â  const handleAddVariant = () => {
Â  Â  setVariants((prev) => [
Â  Â  Â  ...prev,
Â  Â  Â  { weight: "", unit: "g", price: "", discountPrice: "", stock: "" },
Â  Â  ]);
Â  };

Â  const handleVariantChange = (index, field, value) => {
Â  Â  const updatedVariants = [...variants];
Â  Â  updatedVariants[index][field] = value;
Â  Â  setVariants(updatedVariants);
Â  };

Â  const handleRemoveVariant = (index) => {
Â  Â  const updatedVariants = variants.filter((_, i) => i !== index);
Â  Â  setVariants(updatedVariants);
Â  };

Â  const handleSubmit = async (e) => {
Â  Â  e.preventDefault();
Â  Â  if (isSubmitting) return; 
Â  Â  setIsSubmitting(true);
Â  Â  // ðŸ‘ˆ Show the loading message
Â  Â  setIsLoading(true); 

Â  Â  const data = new FormData();
Â  Â  Object.entries(formData).forEach(([key, value]) => {
Â  Â  Â  data.append(key, value);
Â  Â  });

Â  Â  if (mainImage) data.append("image", mainImage);
Â  Â  additionalImages.forEach((img) => data.append("images", img));

Â  Â  const cleanedVariants = variants.filter(
Â  Â  Â  (v) => v.weight && v.price && v.stock
Â  Â  );
Â  Â  data.append("variants", JSON.stringify(cleanedVariants));

Â  Â  try {
    const token = localStorage.getItem("token");
Â  Â  Â  const res = await axios.post(
Â  Â  Â  Â  `${import.meta.env.VITE_API_URL}/api/products/add`,
Â  Â  Â  Â  data, {
Â  Â  Â  Â  Â  headers: {
Â  Â  Â  Â  Â  Â  'Content-Type': 'multipart/form-data',
             Authorization: `Bearer ${token}`,
Â  Â  Â  Â  Â  },
Â  Â  Â  Â  }
Â  Â  Â  );
Â  Â  Â  showFlash("Product added successfully! ðŸŽ‰", "success");
Â  Â  Â  setTimeout(() => {
Â  Â  Â  Â  navigate(-1);
Â  Â  Â  }, 2000);
Â  Â  } catch (err) {
Â  Â  Â  console.error(err);
Â  Â  Â  const errorMessage = err.response?.data?.error || "Error adding product";
Â  Â  Â  showFlash(errorMessage, "error");
Â  Â  } finally {
Â  Â  Â  setIsSubmitting(false);
Â  Â  Â  // ðŸ‘ˆ Hide the loading message
Â  Â  Â  setIsLoading(false); 
Â  Â  }
Â  };

Â  return (
Â  Â  <div className="add-product-container">
Â  Â  Â  <h3 className="form-title">Add New Product</h3>
Â  Â  Â  <form className="add-product-form" onSubmit={handleSubmit}>
Â  Â  Â  Â  <div className="form-group">
Â  Â  Â  Â  Â  <label>Dealer</label>
Â  Â  Â  Â  Â  <input
Â  Â  Â  Â  Â  Â  type="text"
Â  Â  Â  Â  Â  Â  value={dealerName || "Loading..."}
Â  Â  Â  Â  Â  Â  disabled
Â  Â  Â  Â  Â  Â  className="disabled-input"
Â  Â  Â  Â  Â  />
Â  Â  Â  Â  </div>

Â  Â  Â  Â  <div className="form-group">
Â  Â  Â  Â  Â  <label>Name</label>
Â  Â  Â  Â  Â  <input
Â  Â  Â  Â  Â  Â  type="text"
Â  Â  Â  Â  Â  Â  name="name"
Â  Â  Â  Â  Â  Â  value={formData.name}
Â  Â  Â  Â  Â  Â  onChange={handleChange}
Â  Â  Â  Â  Â  Â  required
Â  Â  Â  Â  Â  />
Â  Â  Â  Â  </div>

Â  Â  Â  Â  <div className="form-group">
Â  Â  Â  Â  Â  <label>Category</label>
Â  Â  Â  Â  Â  <select
Â  Â  Â  Â  Â  Â  name="category"
Â  Â  Â  Â  Â  Â  value={formData.category}
Â  Â  Â  Â  Â  Â  onChange={handleChange}
Â  Â  Â  Â  Â  Â  required
Â  Â  Â  Â  Â  >
Â  Â  Â  Â  Â  Â  <option value="">Select Category</option>
Â  Â  Â  Â  Â  Â  <option value="Fruits">Fruits</option>
Â  Â  Â  Â  Â  Â  <option value="Vegetables">Vegetables</option>
Â  Â  Â  Â  Â  Â  <option value="Dairy">Dairy</option>
Â  Â  Â  Â  Â  Â  <option value="Bakery">Bakery</option>
Â  Â  Â  Â  Â  Â  <option value="Snacks">Snacks</option>
Â  Â  Â  Â  Â  Â  <option value="Beverages">Beverages</option>
Â  Â  Â  Â  Â  Â  <option value="Household">Household</option>
Â  Â  Â  Â  Â  </select>
Â  Â  Â  Â  </div>

Â  Â  Â  Â  {formData.category && (
Â  Â  Â  Â  Â  <div className="form-group">
Â  Â  Â  Â  Â  Â  {["Fruits", "Vegetables"].includes(formData.category) ? (
Â  Â  Â  Â  Â  Â  Â  <>
Â  Â  Â  Â  Â  Â  Â  Â  <label>Shelf Life (days)</label>
Â  Â  Â  Â  Â  Â  Â  Â  <input
Â  Â  Â  Â  Â  Â  Â  Â  Â  type="number"
Â  Â  Â  Â  Â  Â  Â  Â  Â  name="shelfLife"
Â  Â  Â  Â  Â  Â  Â  Â  Â  value={formData.shelfLife}
Â  Â  Â  Â  Â  Â  Â  Â  Â  onChange={handleChange}
Â  Â  Â  Â  Â  Â  Â  Â  />
Â  Â  Â  Â  Â  Â  Â  </>
Â  Â  Â  Â  Â  Â  ) : (
Â  Â  Â  Â  Â  Â  Â  <>
Â  Â  Â  Â  Â  Â  Â  Â  <label>Expiry Date</label>
Â  Â  Â  Â  Â  Â  Â  Â  <input
Â  Â  Â  Â  Â  Â  Â  Â  Â  type="date"
Â  Â  Â  Â  Â  Â  Â  Â  Â  name="expiryDate"
Â  Â  Â  Â  Â  Â  Â  Â  Â  value={formData.expiryDate}
Â  Â  Â  Â  Â  Â  Â  Â  Â  onChange={handleChange}
Â  Â  Â  Â  Â  Â  Â  Â  />
Â  Â  Â  Â  Â  Â  Â  </>
Â  Â  Â  Â  Â  Â  )}
Â  Â  Â  Â  Â  </div>
Â  Â  Â  Â  )}

Â  Â  Â  Â  <div className="form-group">
Â  Â  Â  Â  Â  <label>Description</label>
Â  Â  Â  Â  Â  <textarea
Â  Â  Â  Â  Â  Â  name="description"
Â  Â  Â  Â  Â  Â  value={formData.description}
Â  Â  Â  Â  Â  Â  onChange={handleChange}
Â  Â  Â  Â  Â  />
Â  Â  Â  Â  </div>

Â  Â  Â  Â  <div className="form-group">
Â  Â  Â  Â  Â  <label>Brand</label>
Â  Â  Â  Â  Â  <input
Â  Â  Â  Â  Â  Â  type="text"
Â  Â  Â  Â  Â  Â  name="brand"
Â  Â  Â  Â  Â  Â  value={formData.brand}
Â  Â  Â  Â  Â  Â  onChange={handleChange}
Â  Â  Â  Â  Â  />
Â  Â  Â  Â  </div>

Â  Â  Â  Â  <div className="form-group">
Â  Â  Â  Â  Â  <label>Tags (comma separated)</label>
Â  Â  Â  Â  Â  <input
Â  Â  Â  Â  Â  Â  type="text"
Â  Â  Â  Â  Â  Â  name="tags"
Â  Â  Â  Â  Â  Â  value={formData.tags}
Â  Â  Â  Â  Â  Â  onChange={handleChange}
Â  Â  Â  Â  Â  />
Â  Â  Â  Â  </div>

Â  Â  Â  Â  <div className="form-checkboxes">
Â  Â  Â  Â  Â  <label>
Â  Â  Â  Â  Â  Â  <input
Â  Â  Â  Â  Â  Â  Â  type="checkbox"
Â  Â  Â  Â  Â  Â  Â  name="isFeatured"
Â  Â  Â  Â  Â  Â  Â  checked={formData.isFeatured}
Â  Â  Â  Â  Â  Â  Â  onChange={handleChange}
Â  Â  Â  Â  Â  Â  />
Â  Â  Â  Â  Â  Â  Featured
Â  Â  Â  Â  Â  </label>
Â  Â  Â  Â  Â  <label>
Â  Â  Â  Â  Â  Â  <input
Â  Â  Â  Â  Â  Â  Â  type="checkbox"
Â  Â  Â  Â  Â  Â  Â  name="isNewArrival"
Â  Â  Â  Â  Â  Â  Â  checked={formData.isNewArrival}
Â  Â  Â  Â  Â  Â  Â  onChange={handleChange}
Â  Â  Â  Â  Â  Â  />
Â  Â  Â  Â  Â  Â  New Arrival
Â  Â  Â  Â  Â  </label>
Â  Â  Â  Â  Â  <label>
Â  Â  Â  Â  Â  Â  <input
Â  Â  Â  Â  Â  Â  Â  type="checkbox"
Â  Â  Â  Â  Â  Â  Â  name="organic"
Â  Â  Â  Â  Â  Â  Â  checked={formData.organic}
Â  Â  Â  Â  Â  Â  Â  onChange={handleChange}
Â  Â  Â  Â  Â  Â  />
Â  Â  Â  Â  Â  Â  Organic
Â  Â  Â  Â  Â  </label>
Â  Â  Â  Â  </div>

Â  Â  Â  Â  <div className="form-group">
Â  Â  Â  Â  Â  <label>Popularity Score</label>
Â  Â  Â  Â  Â  <input
Â  Â  Â  Â  Â  Â  type="number"
Â  Â  Â  Â  Â  Â  name="popularityScore"
Â  Â  Â  Â  Â  Â  value={formData.popularityScore}
Â  Â  Â  Â  Â  Â  onChange={handleChange}
Â  Â  Â  Â  Â  />
Â  Â  Â  Â  </div>

Â  Â  Â  Â  <div className="form-group">
Â  Â  Â  Â  Â  <label>Main Image</label>
Â  Â  Â  Â  Â  <input
Â  Â  Â  Â  Â  Â  type="file"
Â  Â  Â  Â  Â  Â  accept="image/*"
Â  Â  Â  Â  Â  Â  onChange={handleMainImageChange}
Â  Â  Â  Â  Â  />
Â  Â  Â  Â  Â  {mainImagePreview && (
Â  Â  Â  Â  Â  Â  <div className="image-preview-wrapper">
Â  Â  Â  Â  Â  Â  Â  <img
Â  Â  Â  Â  Â  Â  Â  Â  src={mainImagePreview}
Â  Â  Â  Â  Â  Â  Â  Â  alt="Main Preview"
Â  Â  Â  Â  Â  Â  Â  Â  className="image-preview"
Â  Â  Â  Â  Â  Â  Â  />
Â  Â  Â  Â  Â  Â  Â  <button
Â  Â  Â  Â  Â  Â  Â  Â  type="button"
Â  Â  Â  Â  Â  Â  Â  Â  className="image-delete-btn"
Â  Â  Â  Â  Â  Â  Â  Â  onClick={handleRemoveMainImage}
Â  Â  Â  Â  Â  Â  Â  >
Â  Â  Â  Â  Â  Â  Â  Â  Ã—
Â  Â  Â  Â  Â  Â  Â  </button>
Â  Â  Â  Â  Â  Â  </div>
Â  Â  Â  Â  Â  )}
Â  Â  Â  Â  </div>

Â  Â  Â  Â  <div className="form-group">
Â  Â  Â  Â  Â  <label>Additional Images</label>
Â  Â  Â  Â  Â  <input
Â  Â  Â  Â  Â  Â  type="file"
Â  Â  Â  Â  Â  Â  accept="image/*"
Â  Â  Â  Â  Â  Â  multiple
Â  Â  Â  Â  Â  Â  onChange={handleAdditionalImagesChange}
Â  Â  Â  Â  Â  Â  ref={additionalImagesRef}
Â  Â  Â  Â  Â  Â  className="hidden-file-input"
Â  Â  Â  Â  Â  />
      Â  <div className="file-input-container"> {/* ðŸ‘ˆ New wrapper div */}
          <button
            type="button"
            onClick={handleCustomButtonClick}
            className="custom-file-button"
          >
            Choose Files
          </button>
          <span className="file-count">{additionalImages.length} file(s) chosen</span>
        </div>
Â  Â  Â  Â  Â  <div className="images-preview-container">
Â  Â  Â  Â  Â  Â  {additionalPreviews.map((src, i) => (
Â  Â  Â  Â  Â  Â  Â  <div key={i} className="image-preview-wrapper">
Â  Â  Â  Â  Â  Â  Â  Â  <img
Â  Â  Â  Â  Â  Â  Â  Â  Â  src={src}
Â  Â  Â  Â  Â  Â  Â  Â  Â  alt={`Preview ${i}`}
Â  Â  Â  Â  Â  Â  Â  Â  Â  className="image-preview"
Â  Â  Â  Â  Â  Â  Â  Â  />
Â  Â  Â  Â  Â  Â  Â  Â  <button
Â  Â  Â  Â  Â  Â  Â  Â  Â  type="button"
Â  Â  Â  Â  Â  Â  Â  Â  Â  className="image-delete-btn"
Â  Â  Â  Â  Â  Â  Â  Â  Â  onClick={() => handleRemoveAdditionalImage(i)}
Â  Â  Â  Â  Â  Â  Â  Â  >
Â  Â  Â  Â  Â  Â  Â  Â  Â  Ã—
Â  Â  Â  Â  Â  Â  Â  Â  </button>
Â  Â  Â  Â  Â  Â  Â  </div>
Â  Â  Â  Â  Â  Â  ))}
Â  Â  Â  Â  Â  </div>
Â  Â  Â  Â  </div>

Â  Â  Â  Â  <div className="variants-section">
Â  Â  Â  Â  Â  <h3>Variants</h3>
Â  Â  Â  Â  Â  {variants.map((variant, index) => (
Â  Â  Â  Â  Â  Â  <div key={index} className="variant-row">
Â  Â  Â  Â  Â  Â  Â  <input
Â  Â  Â  Â  Â  Â  Â  Â  type="number"
Â  Â  Â  Â  Â  Â  Â  Â  placeholder="Weight"
Â  Â  Â  Â  Â  Â  Â  Â  value={variant.weight}
Â  Â  Â  Â  Â  Â  Â  Â  onChange={(e) =>
Â  Â  Â  Â  Â  Â  Â  Â  Â  handleVariantChange(index, "weight", e.target.value)
Â  Â  Â  Â  Â  Â  Â  Â  }
Â  Â  Â  Â  Â  Â  Â  Â  required
Â  Â  Â  Â  Â  Â  Â  />
Â  Â  Â  Â  Â  Â  Â  <select
Â  Â  Â  Â  Â  Â  Â  Â  value={variant.unit}
Â  Â  Â  Â  Â  Â  Â  Â  onChange={(e) =>
Â  Â  Â  Â  Â  Â  Â  Â  Â  handleVariantChange(index, "unit", e.target.value)
Â  Â  Â  Â  Â  Â  Â  Â  }
Â  Â  Â  Â  Â  Â  Â  >
Â  Â  Â  Â  Â  Â  Â  Â  <option value="g">g</option>
Â  Â  Â  Â  Â  Â  Â  Â  <option value="kg">kg</option>
Â  Â  Â  Â  Â  Â  Â  Â  <option value="ml">ml</option>
Â  Â  Â  Â  Â  Â  Â  Â  <option value="L">L</option>
Â  Â  Â  Â  Â  Â  Â  Â  <option value="piece">Piece</option>
Â  Â  Â  Â  Â  Â  Â  Â  <option value="dozen">dozen</option>
Â  Â  Â  Â  Â  Â  Â  </select>
Â  Â  Â  Â  Â  Â  Â  <input
Â  Â  Â  Â  Â  Â  Â  Â  type="number"
Â  Â  Â  Â  Â  Â  Â  Â  placeholder="Price"
Â  Â  Â  Â  Â  Â  Â  Â  value={variant.price}
Â  Â  Â  Â  Â  Â  Â  Â  onChange={(e) =>
Â  Â  Â  Â  Â  Â  Â  Â  Â  handleVariantChange(index, "price", e.target.value)
Â  Â  Â  Â  Â  Â  Â  Â  }
Â  Â  Â  Â  Â  Â  Â  Â  required
Â  Â  Â  Â  Â  Â  Â  />
Â  Â  Â  Â  Â  Â  Â  <input
Â  Â  Â  Â  Â  Â  Â  Â  type="number"
Â  Â  Â  Â  Â  Â  Â  Â  placeholder="Discount Price"
Â  Â  Â  Â  Â  Â  Â  Â  value={variant.discountPrice}
Â  Â  Â  Â  Â  Â  Â  Â  onChange={(e) =>
Â  Â  Â  Â  Â  Â  Â  Â  Â  handleVariantChange(index, "discountPrice", e.target.value)
Â  Â  Â  Â  Â  Â  Â  Â  }
Â  Â  Â  Â  Â  Â  Â  />
Â  Â  Â  Â  Â  Â  Â  <input
Â  Â  Â  Â  Â  Â  Â  Â  type="number"
Â  Â  Â  Â  Â  Â  Â  Â  placeholder="Stock"
Â  Â  Â  Â  Â  Â  Â  Â  value={variant.stock}
Â  Â  Â  Â  Â  Â  Â  Â  onChange={(e) =>
Â  Â  Â  Â  Â  Â  Â  Â  Â  handleVariantChange(index, "stock", e.target.value)
Â  Â  Â  Â  Â  Â  Â  Â  }
Â  Â  Â  Â  Â  Â  Â  Â  required
Â  Â  Â  Â  Â  Â  Â  />
Â  Â  Â  Â  Â  Â  Â  <button
Â  Â  Â  Â  Â  Â  Â  Â  type="button"
Â  Â  Â  Â  Â  Â  Â  Â  className="remove-variant-btn"
Â  Â  Â  Â  Â  Â  Â  Â  onClick={() => handleRemoveVariant(index)}
Â  Â  Â  Â  Â  Â  Â  >
Â  Â  Â  Â  Â  Â  Â  Â  Ã—
Â  Â  Â  Â  Â  Â  Â  </button>
Â  Â  Â  Â  Â  Â  Â  </div>
Â  Â  Â  Â  Â  ))}
Â  Â  Â  Â  Â  <button
Â  Â  Â  Â  Â  Â  type="button"
Â  Â  Â  Â  Â  Â  className="add-variant-btn"
Â  Â  Â  Â  Â  Â  onClick={handleAddVariant}
Â  Â  Â  Â  Â  >
Â  Â  Â  Â  Â  Â  + Add Variant
Â  Â  Â  Â  Â  </button>
Â  Â  Â  Â  </div>

Â  Â  Â  Â  <button type="submit" className="submit-btn" disabled={isSubmitting}>
{isSubmitting ? "Adding Product..." : "Add Product"} 
Â  Â  Â  Â  </button>
Â  Â  Â  </form>
{isLoading && (
Â  Â  Â  Â  <div className="loading-overlay">
Â  Â  Â  Â  Â  <div className="loading-spinner"></div>
Â  Â  Â  Â  Â  <p> &#9888; Adding product... This may take a moment.</p>
Â  Â  Â  Â  </div>
Â  Â  Â  )}
Â  Â  </div>
Â  );
};

export default ProductAddForm;